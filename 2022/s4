/*cccJ4 2022 by Carol Wang
 * Trial 4 -> used arraylists for hashmaps
 * scored 4/15
 */

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.ArrayList;

public class Main{
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		int x = input.nextInt();
		String s1;
		String s2;
		Map<String, ArrayList<String>> map1 = new HashMap<String, ArrayList<String>>();
		for(int i = 0; i<x; i++) {
			s1 = input.next();
			s2 = input.next();
			if (!(map1.containsKey(s1))) {
				map1.put(s1, new ArrayList<String>());
			}
			if(!(map1.containsKey(s2))) {
				map1.put(s2, new ArrayList<String>());
			}
			map1.get(s1).add(s2);
			map1.get(s2).add(s1);
		}
		
		int y = input.nextInt();
		Map<String, ArrayList<String>> map2 = new HashMap<String, ArrayList<String>>();
		for(int i = 0; i<y; i++) {
			s1 = input.next();
			s2 = input.next();
			if (!(map2.containsKey(s1))) {
				map2.put(s1, new ArrayList<String>());
			}
			if(!(map2.containsKey(s2))) {
				map2.put(s2, new ArrayList<String>());
			}
			map2.get(s1).add(s2);
			map2.get(s2).add(s1);
		}
		
		int g = input.nextInt();
		
		String[][] allgroups= new String[g][3];
		for(int i = 0; i<g; i++) {
			allgroups[i][0] = input.next();
			allgroups[i][1] = input.next();
			allgroups[i][2] = input.next();
		}
		int count = 0;
		//sort through all groups
		for(int i = 0; i<g; i++) {
			for(int j = 0; j<3; j++) {
				if(map1.containsKey(allgroups[i][j])){
					for(int k = 0; k<map1.get(allgroups[i][j]).size();k++){
						if(!(allgroups[i][0].equals(map1.get(allgroups[i][j]).get(k)) || allgroups[i][1].equals(map1.get(allgroups[i][j]).get(k)) || allgroups[i][2].equals(map1.get(allgroups[i][j]).get(k)))) {
						count++;
						}
					}
				}else if(map2.containsKey(allgroups[i][j])) {
					for(int k = 0; k<map2.get(allgroups[i][j]).size();k++){
						if(allgroups[i][0].equals(map2.get(allgroups[i][j]).get(k)) || allgroups[i][1].equals(map2.get(allgroups[i][j]).get(k)) || allgroups[i][2].equals(map2.get(allgroups[i][j]).get(k))) {
						count++;
						}
					}
				}
			}
		}
		count /= 2;
		System.out.println(count);
	}

}
